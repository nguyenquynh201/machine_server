# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/README.html#stages

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'
      when: always
stages:          # List of stages for jobs, and their order of execution
  - build
  # - test
  # - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: docker:19.03.12
  before_script:
    - apk add curl
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    ## Install ssh-agent
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    ## run ssh-agent
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Add know_hosts
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    PAYLOAD: "Build succeeded $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG rev: $CI_COMMIT_SHORT_SHA"
    BOT_API: https://api.telegram.org/bot$TELE_BOT_TOKEN/sendMessage
  script:
    - echo "Compiling the code..."
    - docker build -t $IMAGE_TAG -t $TAG_COMMIT .
    - docker push $IMAGE_TAG
    - docker push $TAG_COMMIT
    - echo "Compile complete."
    - curl -d chat_id=$TELE_CHAT_ID --data-urlencode "text=$PAYLOAD" $BOT_API
    - echo "Done !!!"
    # Run script deploy
    - if [ "$CI_COMMIT_REF_SLUG" = "develop" ]; then HOST=$HOST_STAGING; fi
    - echo Deploy to host "$HOST"
    - |
      ssh -tt ubuntu@$HOST -p $PORT /bin/bash << EOF
      cd devops/ && bash update-container
      exit
      EOF
    - curl --data "{\"text\":\"$PAYLOAD_DEPLOY\"}" $BOT_API
    - echo "Done !!!"
